#!/usr/bin/env php

<?php

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\ProcessBuilder;

umask(0000);

set_time_limit(0);

require __DIR__ . '/../var/bootstrap.php';

$console = new Application('Deanery', '0.0.1');

$console
    ->getDefinition()
    ->addOption(
        new InputOption(
            '--env',
            '-e',
            InputOption::VALUE_REQUIRED,
            'The Environment name.', 'prod'
        )
    );
$console
    ->getDefinition()
    ->addOption(
        new InputOption(
            '--no-debug',
            null,
            InputOption::VALUE_NONE,
            'Switches off debug mode.'
        )
    );

$input = new ArgvInput();
$env = $input->getParameterOption(['--env', '-e'], 'dev');
$debug = !$input->hasParameterOption(['--no-debug', '']) && $env !== 'prod';

$app = new Silex\Application(['env' => $env]);
require __DIR__ . '/../app/AppKernel.php';
if ($debug) {
    Debug::enable();
    $app['debug'] = true;
} else {
    $app['debug'] = false;
}
$app->boot();

$console
    ->register('cache:clear')
    ->setName('cache:clear')
    ->setDescription('Clears the cache')
    ->setHelp(
        <<<EOT
The <info>%command.name%</info> command clears the application cache for a given environment
and debug mode:
<info>php %command.full_name% --env=dev</info>
<info>php %command.full_name% --env=prod --no-debug</info>
EOT
    )
    ->setCode(
        function (InputInterface $input, OutputInterface $output) use ($app) {
            $finder = Finder::create()->in(__DIR__.'/../var/cache/'.$app['env']);
            $fs = new Filesystem();
            try {
                $output->writeln(
                    sprintf(
                        'Clearing the cache for the <info>%s</info> environment with debug <info>%s</info>',
                        $app['env'],
                        var_export($app['debug'], true)
                    )
                );
                $fs->remove($finder);
            } catch (IOExceptionInterface $e) {
                echo "An error occurred while creating your directory at " . $e->getPath();
            }
        }
    );

if (version_compare(phpversion(), '5.4.0', '>') && !defined('HHVM_VERSION')) {
    $console
        ->register('server:run')
        ->setName('server:run')
        ->setDescription('Runs PHP built-in web server')
        ->addArgument('address', InputArgument::OPTIONAL, 'Address:port', '127.0.0.1:8000')
        ->addOption('docroot', 'd', InputOption::VALUE_REQUIRED, 'Document root', 'web/')
        ->addOption('router', 'r', InputOption::VALUE_REQUIRED, 'Path to custom router script')
        ->setHelp(
            <<<EOF
The <info>%command.name%</info> runs PHP built-in web server:
<info>%command.full_name%</info>
To change default bind address and port use the <info>address</info> argument:
<info>%command.full_name% 127.0.0.1:8080</info>
To change default docroot directory use the <info>--docroot</info> option:
<info>%command.full_name% --docroot=htdocs/</info>
If you have custom docroot directory layout, you can specify your own
router script using <info>--router</info> option:
<info>%command.full_name% --router=app/config/router.php</info>
Specifing a router script is required when the used environment is not "dev" or
"prod".
See also: http://www.php.net/manual/en/features.commandline.webserver.php
EOF
        )
        ->setCode(
            function (InputInterface $input, OutputInterface $output) use ($app) {
                $output->writeln(sprintf("Server running on <info>http://%s</info>\n", $input->getArgument('address')));
                $env = $input->getParameterOption(['--env', '-e'], 'dev');
                $router = $input->getOption('router')
                    ?: sprintf('%s/../src/Resources/config/router_%s.php', __DIR__, $env);
                $builder = new ProcessBuilder([PHP_BINARY, '-S', $input->getArgument('address'), $router]);
                $builder->setWorkingDirectory($input->getOption('docroot'));
                $builder->setTimeout(null);
                $builder->getProcess()->run(function ($type, $buffer) use ($output) {
                    if (OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {
                        $output->write($buffer);
                    }
                });
            }
        );
}
$console->run($input);